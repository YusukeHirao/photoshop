// Generated by CoffeeScript 1.3.3
/**
 * リサイズ&トリミング
 * version 1.1
*/

var $dialog, AUTO_INCREMENT, ControlUI, DialogUI, FILL_ZERO, INCREMENT_INITIAL, WindowUI, close, fill, resize, save, trim, varDump,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

AUTO_INCREMENT = true;

INCREMENT_INITIAL = 0;

FILL_ZERO = 3;

trim = true;

fill = true;

preferences.rulerUnits = Units.PIXELS;

Number.prototype.fillZero = function(n) {
  var zeros;
  zeros = new Array(n + 1 - this.toString(10).length);
  return zeros.join('0') + this;
};

varDump = function(obj) {
  var _key, _rlt, _val;
  _rlt = [];
  for (_key in obj) {
    if (!__hasProp.call(obj, _key)) continue;
    try {
      _val = obj[_key];
      if (!(_val instanceof Function)) {
        _rlt.push(_key + ': ' + _val);
      }
    } catch (error) {

    }
  }
  return alert(_rlt.join('\n'));
};

ControlUI = (function() {

  function ControlUI($window, type, width, height, left, top, options) {
    this.type = type;
    this.width = width != null ? width : 100;
    this.height = height != null ? height : 20;
    this.left = left != null ? left : 0;
    this.top = top != null ? top : 0;
    if (options == null) {
      options = [];
    }
    this.window = $window.window;
    this.context = this.window.add.apply(this.window, [this.type, [this.left, this.top, this.width + this.left, this.height + this.top]].concat(options));
  }

  ControlUI.prototype.on = function(event, callback) {
    event = event.toLowerCase().replace(/^on/i, '').replace(/^./, function(character) {
      return character.toUpperCase();
    });
    this.context['on' + event] = callback;
    return this;
  };

  return ControlUI;

})();

WindowUI = (function() {

  function WindowUI(type, name, width, height, options, callback) {
    var stop;
    this.type = type;
    this.name = name != null ? name : 'ダイアログボックス';
    this.width = width != null ? width : 100;
    this.height = height != null ? height : 100;
    this.window = new Window(this.type, this.name, [0, 0, this.width, this.height], options);
    this.window.center();
    this.controls = [];
    stop = callback != null ? callback.call(this) : void 0;
    if (stop !== false) {
      this.show();
    }
  }

  WindowUI.prototype.show = function() {
    this.window.show();
    return this;
  };

  WindowUI.prototype.hide = function() {
    this.window.hide();
    return this;
  };

  WindowUI.prototype.center = function() {
    this.window.center();
    return this;
  };

  WindowUI.prototype.addControl = function(type, width, height, left, top, options, events) {
    var $ctrl, callback, event, _ref;
    this.width = width;
    this.height = height;
    this.left = left;
    this.top = top;
    $ctrl = new ControlUI(this, type, this.width, this.height, this.left, this.top, options);
    if (events != null) {
      _ref = this.events;
      for (event in _ref) {
        if (!__hasProp.call(_ref, event)) continue;
        callback = _ref[event];
        $ctrl.on(event, callback);
      }
    }
    this.controls.push($ctrl);
    return $ctrl;
  };

  WindowUI.prototype.addTextbox = function(width, height, left, top, defaultText, events) {
    this.width = width;
    this.height = height;
    this.left = left;
    this.top = top;
    this.defaultText = defaultText != null ? defaultText : '';
    return this.addControl('edittext', this.width, this.height, this.left, this.top, [this.defaultText], events);
  };

  WindowUI.prototype.addText = function(text, width, height, left, top, events) {
    this.text = text != null ? text : '';
    this.width = width;
    this.height = height;
    this.left = left;
    this.top = top;
    return this.addControl('statictext', this.width, this.height, this.left, this.top, [this.text], events);
  };

  return WindowUI;

})();

DialogUI = (function(_super) {

  __extends(DialogUI, _super);

  function DialogUI(name, width, height, options, callback) {
    this.name = name;
    this.width = width;
    this.height = height;
    DialogUI.__super__.constructor.call(this, 'dialog', this.name, this.width, this.height, options, callback);
  }

  return DialogUI;

})(WindowUI);

resize = function(width, height) {
  var originHeight, originRatio, originWidth, ratio, resizeHeight, resizeWidth, trimHeight, trimWidth;
  originWidth = activeDocument.width.value;
  originHeight = activeDocument.height.value;
  originRatio = originHeight / originWidth;
  ratio = height / width;
  if (fill) {
    resizeWidth = width;
    resizeHeight = height;
    if (trim && originWidth > originHeight) {
      trimWidth = originHeight / ratio;
      trimHeight = originHeight;
    } else {
      trimWidth = originWidth;
      trimHeight = originWidth * ratio;
    }
    activeDocument.resizeCanvas(trimWidth, trimHeight, AnchorPosition.MIDDLECENTER);
  } else {
    if (width > height) {
      resizeWidth = height / originRatio;
      resizeHeight = height;
      if (resizeWidth > width) {
        resizeWidth = width;
        resizeHeight = width * originRatio;
      }
    } else {
      resizeWidth = width;
      resizeHeight = width * originRatio;
      if (resizeHeight > height) {
        resizeWidth = height / originRatio;
        resizeHeight = height;
      }
    }
  }
  activeDocument.resizeImage(resizeWidth, resizeHeight);
};

save = function(fileName, folder) {
  var jpegOpt, newFile;
  if (folder == null) {
    folder = '~';
  }
  newFile = new File(folder + '/' + fileName);
  jpegOpt = new JPEGSaveOptions();
  jpegOpt.embedColorProfile = false;
  jpegOpt.quality = 12;
  jpegOpt.formatOptions = FormatOptions.OPTIMIZEDBASELINE;
  jpegOpt.scans = 3;
  jpegOpt.matte = MatteType.NONE;
  activeDocument.saveAs(newFile, jpegOpt, true, Extension.LOWERCASE);
};

close = function(showDialog) {
  if (showDialog == null) {
    showDialog = false;
  }
  if (showDialog) {
    if (!confirm('閉じてよろしいですか?')) {
      return;
    }
  }
  activeDocument.close(SaveOptions.DONOTSAVECHANGES);
};

$dialog = new DialogUI('ダイアログ', 500, 400, null, function() {
  this.addText('幅', 30, 20, 10, 10);
  this.addTextbox(200, 20, 50, 10);
  this.addText('高さ', 30, 20, 10, 40);
  return this.addTextbox(200, 20, 50, 40);
});

/*
filter = undefined # TODO: getFilesの引数はまだ理解していないのであとで解決する。
targetFolder = Folder.selectDialog '対象のフォルダを選択してください'
saveFolder = Folder.selectDialog '保存先のフォルダを選択してください'
fileList = targetFolder.getFiles filter

width = prompt 'WIDTH:', ''
width = parseInt width, 10
height = prompt 'HEIGHT', ''
height = parseInt height, 10

if confirm 'トリミングしますか?'
	trim = true
else
	fill = confirm '余白を埋めますか?'

increment = INCREMENT_INITIAL

for fileName in fileList
	# 画像でなければ無視してループの先頭に戻る
	unless /\.(jpe?g|gif|png|bmp|tiff?)$/i.test fileName
		# alert fileName
		continue
	file = new File fileName
	try
		if file.open 'r'
			open fileName
			if true # AUTO_INCREMENT
				newName = increment.fillZero(FILL_ZERO) + '.jpg'
				increment += 1
			resize width, height
			save newName, saveFolder
			close()
		else
			alert fileName
			throw 'fail'
	catch error
		alert error.message
		continue
*/

